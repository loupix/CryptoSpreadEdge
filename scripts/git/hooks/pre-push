#!/bin/bash
# Hook pre-push pour CryptoSpreadEdge

echo "üöÄ V√©rification pre-push..."

# V√©rifier que les tests passent
echo "üß™ Ex√©cution des tests..."
python -m pytest tests/ -v --tb=short
if [ $? -ne 0 ]; then
    echo "‚ùå Les tests ont √©chou√© - Push annul√©"
    exit 1
fi

# V√©rifier la couverture de code
echo "üìä V√©rification de la couverture de code..."
python -m pytest tests/ --cov=src --cov-report=term-missing --cov-fail-under=70
if [ $? -ne 0 ]; then
    echo "‚ö†Ô∏è  Couverture de code insuffisante - Push autoris√© mais attention"
fi

# V√©rifier la qualit√© du code
echo "üîç V√©rification de la qualit√© du code..."
python -m black --check src/
if [ $? -ne 0 ]; then
    echo "‚ö†Ô∏è  Code non format√© avec Black - Push autoris√© mais attention"
fi

python -m isort --check-only src/
if [ $? -ne 0 ]; then
    echo "‚ö†Ô∏è  Imports non tri√©s avec isort - Push autoris√© mais attention"
fi

# V√©rifier les types
echo "üîç V√©rification des types..."
python -m mypy src/ --ignore-missing-imports
if [ $? -ne 0 ]; then
    echo "‚ö†Ô∏è  Erreurs de type d√©tect√©es - Push autoris√© mais attention"
fi

# V√©rifier les secrets
echo "üîê V√©rification des secrets..."
if git diff --cached --name-only | grep -q "\.env$"; then
    echo "‚ö†Ô∏è  Fichier .env d√©tect√© dans le commit"
    echo "üí° Assurez-vous qu'aucun secret n'est expos√©"
fi

# V√©rifier les fichiers volumineux
echo "üìè V√©rification des fichiers volumineux..."
large_files=$(git ls-files | xargs ls -la | awk '$5 > 1048576 {print $9 " (" $5 " bytes)"}')
if [ -n "$large_files" ]; then
    echo "‚ö†Ô∏è  Fichiers volumineux d√©tect√©s:"
    echo "$large_files"
fi

# V√©rifier la branche
branch=$(git branch --show-current)
if [[ $branch == "master" ]] || [[ $branch == "main" ]]; then
    echo "‚ö†Ô∏è  Push vers la branche principale d√©tect√©"
    echo "üí° Assurez-vous que c'est intentionnel"
fi

echo "‚úÖ V√©rifications pre-push termin√©es"