#!/bin/bash
# Script de d√©ploiement complet du syst√®me de base de donn√©es CryptoSpreadEdge

set -e

echo "üöÄ D√©ploiement complet du syst√®me de base de donn√©es CryptoSpreadEdge..."

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# V√©rifier que Docker est install√©
if ! command -v docker &> /dev/null; then
    error "Docker n'est pas install√©. Veuillez l'installer d'abord."
    exit 1
fi

# V√©rifier que Docker Compose est install√©
if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose n'est pas install√©. Veuillez l'installer d'abord."
    exit 1
fi

# Aller dans le r√©pertoire du projet
cd "$(dirname "$0")/../.."

log "R√©pertoire de travail: $(pwd)"

# 1. Arr√™ter les services existants
log "Arr√™t des services existants..."
docker-compose -f infrastructure/docker/compose/docker-compose.yml down || true

# 2. Nettoyer les volumes existants (optionnel)
if [ "$1" = "--clean" ]; then
    warn "Nettoyage des volumes existants..."
    docker volume prune -f
fi

# 3. Construire les images
log "Construction des images Docker..."
docker-compose -f infrastructure/docker/compose/docker-compose.yml build --no-cache

# 4. D√©marrer PostgreSQL en premier
log "D√©marrage de PostgreSQL..."
docker-compose -f infrastructure/docker/compose/docker-compose.yml up -d postgres

# Attendre que PostgreSQL soit pr√™t
log "Attente que PostgreSQL soit pr√™t..."
sleep 15

# V√©rifier que PostgreSQL est en cours d'ex√©cution
if ! docker-compose -f infrastructure/docker/compose/docker-compose.yml ps postgres | grep -q "Up"; then
    error "PostgreSQL n'a pas d√©marr√© correctement"
    docker-compose -f infrastructure/docker/compose/docker-compose.yml logs postgres
    exit 1
fi

log "PostgreSQL est d√©marr√© avec succ√®s!"

# 5. Initialiser la base de donn√©es
log "Initialisation de la base de donn√©es..."

# Attendre un peu plus pour s'assurer que PostgreSQL est compl√®tement pr√™t
sleep 10

# Ex√©cuter le script d'initialisation
python scripts/database/init_database.py

if [ $? -eq 0 ]; then
    log "Base de donn√©es initialis√©e avec succ√®s!"
else
    error "√âchec de l'initialisation de la base de donn√©es"
    exit 1
fi

# 6. Tester la base de donn√©es
log "Test de la base de donn√©es..."
python scripts/database/test_database.py

if [ $? -eq 0 ]; then
    log "Tests de base de donn√©es r√©ussis!"
else
    error "√âchec des tests de base de donn√©es"
    exit 1
fi

# 7. D√©marrer tous les services
log "D√©marrage de tous les services..."
docker-compose -f infrastructure/docker/compose/docker-compose.yml up -d

# Attendre que tous les services soient pr√™ts
log "Attente que tous les services soient pr√™ts..."
sleep 20

# 8. V√©rifier l'√©tat des services
log "V√©rification de l'√©tat des services..."
docker-compose -f infrastructure/docker/compose/docker-compose.yml ps

# 9. Tester les APIs
log "Test des APIs..."

# Attendre que l'API soit pr√™te
sleep 10

# Tester l'API de sant√©
if command -v curl &> /dev/null; then
    log "Test de l'API de sant√©..."
    curl -f http://localhost:8000/api/v1/historical/health || warn "API de sant√© non accessible"
    
    log "Test de l'API des ordres..."
    curl -f "http://localhost:8000/api/v1/historical/orders?limit=10" || warn "API des ordres non accessible"
    
    log "Test de l'API des positions..."
    curl -f "http://localhost:8000/api/v1/historical/positions" || warn "API des positions non accessible"
    
    log "Test de l'API des trades..."
    curl -f "http://localhost:8000/api/v1/historical/trades?limit=10" || warn "API des trades non accessible"
else
    warn "curl n'est pas install√©, impossible de tester les APIs"
fi

# 10. Ex√©cuter les tests d'int√©gration
if [ "$1" = "--test" ] || [ "$2" = "--test" ]; then
    log "Ex√©cution des tests d'int√©gration..."
    python -m pytest tests/integration/test_postgresql_integration.py -v
fi

# 11. Afficher les informations de connexion
log "Informations de connexion:"
echo "PostgreSQL: localhost:5432"
echo "Base de donn√©es: cryptospreadedge"
echo "Utilisateur: trading_user"
echo "Mot de passe: secure_password"
echo ""
echo "URL de connexion: postgresql://trading_user:secure_password@localhost:5432/cryptospreadedge"
echo ""
echo "APIs disponibles:"
echo "- Sant√©: http://localhost:8000/api/v1/historical/health"
echo "- Ordres: http://localhost:8000/api/v1/historical/orders"
echo "- Positions: http://localhost:8000/api/v1/historical/positions"
echo "- Trades: http://localhost:8000/api/v1/historical/trades"
echo "- Portefeuille: http://localhost:8000/api/v1/historical/portfolio"

# 12. Afficher les commandes utiles
log "Commandes utiles:"
echo "Voir les logs PostgreSQL: docker-compose -f infrastructure/docker/compose/docker-compose.yml logs postgres"
echo "Se connecter √† PostgreSQL: docker exec -it cryptospreadedge-postgres psql -U trading_user -d cryptospreadedge"
echo "Arr√™ter les services: docker-compose -f infrastructure/docker/compose/docker-compose.yml down"
echo "Red√©marrer les services: docker-compose -f infrastructure/docker/compose/docker-compose.yml restart"
echo "Voir les logs de l'application: docker-compose -f infrastructure/docker/compose/docker-compose.yml logs cryptospreadedge"

# 13. Afficher le statut final
log "Statut final des services:"
docker-compose -f infrastructure/docker/compose/docker-compose.yml ps

# 14. Afficher les m√©triques de performance
log "M√©triques de performance:"
echo "M√©moire utilis√©e:"
docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" | grep cryptospreadedge || true

echo ""
echo "Espace disque utilis√©:"
docker system df

log "‚úÖ D√©ploiement complet termin√© avec succ√®s!"

# 15. Afficher les prochaines √©tapes
echo ""
echo "üéØ Prochaines √©tapes:"
echo "1. Configurer les cl√©s API des exchanges dans l'interface"
echo "2. Cr√©er des utilisateurs et des strat√©gies de trading"
echo "3. Configurer les alertes et notifications"
echo "4. Monitorer les performances via les dashboards"
echo "5. Configurer les sauvegardes automatiques"

echo ""
echo "üìö Documentation:"
echo "- Guide d'utilisation: docs/database/README.md"
echo "- Documentation technique: docs/database/POSTGRESQL_INTEGRATION.md"
echo "- Configuration des plateformes: src/database/platform_config.py"

echo ""
echo "üîß Maintenance:"
echo "- Sauvegardes: scripts/database/backup_system.py"
echo "- Monitoring: scripts/database/monitoring_system.py"
echo "- Optimisation: scripts/database/performance_optimizer.py"
echo "- S√©curit√©: scripts/database/security_system.py"