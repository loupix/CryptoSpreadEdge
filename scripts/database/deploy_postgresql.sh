#!/bin/bash
# Script de d√©ploiement PostgreSQL pour CryptoSpreadEdge

set -e

echo "üöÄ D√©ploiement de PostgreSQL pour CryptoSpreadEdge..."

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction de logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

# V√©rifier que Docker est install√©
if ! command -v docker &> /dev/null; then
    error "Docker n'est pas install√©. Veuillez l'installer d'abord."
    exit 1
fi

# V√©rifier que Docker Compose est install√©
if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose n'est pas install√©. Veuillez l'installer d'abord."
    exit 1
fi

# Aller dans le r√©pertoire du projet
cd "$(dirname "$0")/../.."

log "R√©pertoire de travail: $(pwd)"

# 1. Arr√™ter les services existants
log "Arr√™t des services existants..."
docker-compose -f infrastructure/docker/compose/docker-compose.yml down || true

# 2. Construire les images
log "Construction des images Docker..."
docker-compose -f infrastructure/docker/compose/docker-compose.yml build

# 3. D√©marrer PostgreSQL en premier
log "D√©marrage de PostgreSQL..."
docker-compose -f infrastructure/docker/compose/docker-compose.yml up -d postgres

# Attendre que PostgreSQL soit pr√™t
log "Attente que PostgreSQL soit pr√™t..."
sleep 10

# V√©rifier que PostgreSQL est en cours d'ex√©cution
if ! docker-compose -f infrastructure/docker/compose/docker-compose.yml ps postgres | grep -q "Up"; then
    error "PostgreSQL n'a pas d√©marr√© correctement"
    docker-compose -f infrastructure/docker/compose/docker-compose.yml logs postgres
    exit 1
fi

log "PostgreSQL est d√©marr√© avec succ√®s!"

# 4. Initialiser la base de donn√©es
log "Initialisation de la base de donn√©es..."

# Attendre un peu plus pour s'assurer que PostgreSQL est compl√®tement pr√™t
sleep 5

# Ex√©cuter le script d'initialisation
python scripts/database/init_database.py

if [ $? -eq 0 ]; then
    log "Base de donn√©es initialis√©e avec succ√®s!"
else
    error "√âchec de l'initialisation de la base de donn√©es"
    exit 1
fi

# 5. Tester la base de donn√©es
log "Test de la base de donn√©es..."
python scripts/database/test_database.py

if [ $? -eq 0 ]; then
    log "Tests de base de donn√©es r√©ussis!"
else
    error "√âchec des tests de base de donn√©es"
    exit 1
fi

# 6. D√©marrer tous les services
log "D√©marrage de tous les services..."
docker-compose -f infrastructure/docker/compose/docker-compose.yml up -d

# Attendre que tous les services soient pr√™ts
log "Attente que tous les services soient pr√™ts..."
sleep 15

# 7. V√©rifier l'√©tat des services
log "V√©rification de l'√©tat des services..."
docker-compose -f infrastructure/docker/compose/docker-compose.yml ps

# 8. Afficher les informations de connexion
log "Informations de connexion:"
echo "PostgreSQL: localhost:5432"
echo "Base de donn√©es: cryptospreadedge"
echo "Utilisateur: trading_user"
echo "Mot de passe: secure_password"
echo ""
echo "URL de connexion: postgresql://trading_user:secure_password@localhost:5432/cryptospreadedge"

# 9. Afficher les commandes utiles
log "Commandes utiles:"
echo "Voir les logs PostgreSQL: docker-compose -f infrastructure/docker/compose/docker-compose.yml logs postgres"
echo "Se connecter √† PostgreSQL: docker exec -it cryptospreadedge-postgres psql -U trading_user -d cryptospreadedge"
echo "Arr√™ter les services: docker-compose -f infrastructure/docker/compose/docker-compose.yml down"
echo "Red√©marrer les services: docker-compose -f infrastructure/docker/compose/docker-compose.yml restart"

log "‚úÖ D√©ploiement PostgreSQL termin√© avec succ√®s!"

# 10. Optionnel: Ex√©cuter les tests d'int√©gration
if [ "$1" = "--test" ]; then
    log "Ex√©cution des tests d'int√©gration..."
    python -m pytest tests/integration/test_postgresql_integration.py -v
fi