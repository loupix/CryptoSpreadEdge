name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop, 'feature/*', 'hotfix/*', 'release/*' ]
  pull_request:
    branches: [ master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
        environment: [dev, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: ${{ matrix.python-version }}
        environment-file: environment-${{ matrix.environment }}.yml
        activate-environment: cryptospreadedge-${{ matrix.environment }}
    
    - name: Install dependencies
      shell: bash -l {0}
      run: |
        conda activate cryptospreadedge-${{ matrix.environment }}
        pip install -r requirements.txt
    
    - name: Lint with black
      shell: bash -l {0}
      run: |
        conda activate cryptospreadedge-${{ matrix.environment }}
        black --check src/
    
    - name: Lint with isort
      shell: bash -l {0}
      run: |
        conda activate cryptospreadedge-${{ matrix.environment }}
        isort --check-only src/
    
    - name: Type check with mypy
      shell: bash -l {0}
      run: |
        conda activate cryptospreadedge-${{ matrix.environment }}
        mypy src/ --ignore-missing-imports
    
    - name: Test with pytest
      shell: bash -l {0}
      run: |
        conda activate cryptospreadedge-${{ matrix.environment }}
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: 3.11
        environment-file: environment-test.yml
        activate-environment: cryptospreadedge-test
    
    - name: Security scan with bandit
      shell: bash -l {0}
      run: |
        conda activate cryptospreadedge-test
        bandit -r src/ -f json -o bandit-report.json
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: infrastructure/docker/services/cryptospreadedge/Dockerfile
        push: false
        tags: cryptospreadedge:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ DÃ©ploiement en production..."
        # Ici vous pouvez ajouter votre logique de dÃ©ploiement
        # Par exemple, dÃ©ploiement sur un serveur ou un service cloud