version: '3.8'

services:
  # Application principale
  cryptospreadedge:
    build:
      context: ../../
      dockerfile: infrastructure/docker/services/cryptospreadedge/Dockerfile
    container_name: cryptospreadedge-app
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - INFLUXDB_URL=http://influxdb:8086
      - KAFKA_BROKERS=kafka:9092
      - POSTGRES_URL=postgresql://trading_user:secure_password@postgres:5432/cryptospreadedge
    depends_on:
      - redis
      - influxdb
      - kafka
      - postgres
    volumes:
      - ../../data:/app/data
      - ../../logs:/app/logs
    networks:
      - cryptospreadedge-network

  # Redis pour le cache et pub/sub
  redis:
    image: redis:7-alpine
    container_name: cryptospreadedge-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cryptospreadedge-network

  # InfluxDB pour les données time-series
  influxdb:
    image: influxdb:2.7-alpine
    container_name: cryptospreadedge-influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=password123
      - DOCKER_INFLUXDB_INIT_ORG=cryptospreadedge
      - DOCKER_INFLUXDB_INIT_BUCKET=trading_data
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - cryptospreadedge-network

  # PostgreSQL pour les données relationnelles
  postgres:
    image: postgres:15-alpine
    container_name: cryptospreadedge-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=cryptospreadedge
      - POSTGRES_USER=trading_user
      - POSTGRES_PASSWORD=secure_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - cryptospreadedge-network

  # Kafka pour le streaming de données
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: cryptospreadedge-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - cryptospreadedge-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: cryptospreadedge-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - cryptospreadedge-network

  # Prometheus pour les métriques
  prometheus:
    image: prom/prometheus:latest
    container_name: cryptospreadedge-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cryptospreadedge-network

  # Grafana pour les dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: cryptospreadedge-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - cryptospreadedge-network

  # Elasticsearch pour les logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: cryptospreadedge-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - cryptospreadedge-network

  # Kibana pour la visualisation des logs
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: cryptospreadedge-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - cryptospreadedge-network

  # Logstash pour le traitement des logs
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: cryptospreadedge-logstash
    restart: unless-stopped
    ports:
      - "5044:5044"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
    networks:
      - cryptospreadedge-network

volumes:
  redis_data:
  influxdb_data:
  postgres_data:
  kafka_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  cryptospreadedge-network:
    driver: bridge