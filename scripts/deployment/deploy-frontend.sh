#!/bin/bash

# Script de d√©ploiement du frontend CryptoSpreadEdge

set -e

echo "üöÄ D√©ploiement du frontend CryptoSpreadEdge..."

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier si Docker est install√©
if ! command -v docker &> /dev/null; then
    log_error "Docker n'est pas install√©. Veuillez installer Docker."
    exit 1
fi

# V√©rifier si Docker Compose est install√©
if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose n'est pas install√©. Veuillez installer Docker Compose."
    exit 1
fi

# Aller dans le r√©pertoire du projet
cd "$(dirname "$0")/../.."

log_info "R√©pertoire de travail: $(pwd)"

# V√©rifier si le dossier frontend existe
if [ ! -d "frontend" ]; then
    log_error "Le dossier frontend n'existe pas."
    exit 1
fi

# V√©rifier si package.json existe
if [ ! -f "frontend/package.json" ]; then
    log_error "Le fichier package.json n'existe pas dans le dossier frontend."
    exit 1
fi

log_info "Construction de l'image Docker du frontend..."

# Construire l'image Docker
docker build -f infrastructure/docker/services/frontend/Dockerfile -t cryptospreadedge-frontend:latest .

if [ $? -eq 0 ]; then
    log_success "Image Docker construite avec succ√®s"
else
    log_error "Erreur lors de la construction de l'image Docker"
    exit 1
fi

log_info "D√©marrage du conteneur frontend..."

# Arr√™ter le conteneur existant s'il existe
if [ "$(docker ps -q -f name=cryptospreadedge-frontend)" ]; then
    log_info "Arr√™t du conteneur existant..."
    docker stop cryptospreadedge-frontend
fi

# Supprimer le conteneur existant s'il existe
if [ "$(docker ps -aq -f name=cryptospreadedge-frontend)" ]; then
    log_info "Suppression du conteneur existant..."
    docker rm cryptospreadedge-frontend
fi

# D√©marrer le nouveau conteneur
docker run -d \
    --name cryptospreadedge-frontend \
    --network cryptospreadedge-network \
    -p 3000:80 \
    --restart unless-stopped \
    cryptospreadedge-frontend:latest

if [ $? -eq 0 ]; then
    log_success "Conteneur frontend d√©marr√© avec succ√®s"
else
    log_error "Erreur lors du d√©marrage du conteneur frontend"
    exit 1
fi

# Attendre que le conteneur soit pr√™t
log_info "Attente du d√©marrage du conteneur..."
sleep 10

# V√©rifier le statut du conteneur
if [ "$(docker ps -q -f name=cryptospreadedge-frontend)" ]; then
    log_success "Frontend d√©ploy√© avec succ√®s!"
    log_info "Interface disponible sur: http://localhost:3000"
    log_info "Pour voir les logs: docker logs cryptospreadedge-frontend"
    log_info "Pour arr√™ter: docker stop cryptospreadedge-frontend"
else
    log_error "Le conteneur frontend n'est pas en cours d'ex√©cution"
    log_info "Logs du conteneur:"
    docker logs cryptospreadedge-frontend
    exit 1
fi

# Afficher les informations de d√©ploiement
echo ""
log_info "=== Informations de d√©ploiement ==="
echo "üåê Frontend URL: http://localhost:3000"
echo "üê≥ Conteneur: cryptospreadedge-frontend"
echo "üìä Statut: $(docker inspect --format='{{.State.Status}}' cryptospreadedge-frontend)"
echo "üîó R√©seau: cryptospreadedge-network"
echo ""

# V√©rifier la sant√© du conteneur
log_info "V√©rification de la sant√© du conteneur..."
if curl -f http://localhost:3000/health > /dev/null 2>&1; then
    log_success "Le frontend r√©pond correctement"
else
    log_warning "Le frontend ne r√©pond pas encore (peut prendre quelques secondes)"
fi

echo ""
log_success "D√©ploiement du frontend termin√©!"