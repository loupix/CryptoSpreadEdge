version: '3.8'

services:
  # Application principale
  cryptospreadedge:
    image: cryptospreadedge:latest
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      placement:
        constraints:
          - node.role == worker
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
      rollback_config:
        parallelism: 1
        delay: 5s
        monitor: 60s
        max_failure_ratio: 0.3
    environment:
      - REDIS_URL=redis://redis:6379
      - INFLUXDB_URL=http://influxdb:8086
      - KAFKA_BROKERS=kafka:9092
    volumes:
      - type: bind
        source: /var/lib/cryptospreadedge/data
        target: /app/data
      - type: bind
        source: /var/lib/cryptospreadedge/logs
        target: /app/logs
    networks:
      - cryptospreadedge-network
    depends_on:
      - redis
      - influxdb
      - kafka

  # Redis pour le cache et pub/sub
  redis:
    image: redis:7-alpine
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
      placement:
        constraints:
          - node.role == manager
    volumes:
      - type: volume
        source: redis_data
        target: /data
    networks:
      - cryptospreadedge-network

  # InfluxDB pour les données time-series
  influxdb:
    image: influxdb:2.7-alpine
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      placement:
        constraints:
          - node.role == manager
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=password123
      - DOCKER_INFLUXDB_INIT_ORG=cryptospreadedge
      - DOCKER_INFLUXDB_INIT_BUCKET=trading_data
    volumes:
      - type: volume
        source: influxdb_data
        target: /var/lib/influxdb2
    networks:
      - cryptospreadedge-network

  # Kafka pour le streaming de données
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
      placement:
        constraints:
          - node.role == manager
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - cryptospreadedge-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      placement:
        constraints:
          - node.role == manager
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - type: volume
        source: kafka_data
        target: /var/lib/kafka/data
    networks:
      - cryptospreadedge-network
    depends_on:
      - zookeeper

  # Prometheus pour les métriques
  prometheus:
    image: prom/prometheus:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
      placement:
        constraints:
          - node.role == manager
    volumes:
      - type: bind
        source: /etc/prometheus/prometheus.yml
        target: /etc/prometheus/prometheus.yml
      - type: volume
        source: prometheus_data
        target: /prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cryptospreadedge-network

  # Grafana pour les dashboards
  grafana:
    image: grafana/grafana:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
      placement:
        constraints:
          - node.role == manager
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - type: volume
        source: grafana_data
        target: /var/lib/grafana
    networks:
      - cryptospreadedge-network
    depends_on:
      - prometheus

  # Nginx pour le load balancing
  nginx:
    image: nginx:alpine
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
      placement:
        constraints:
          - node.role == manager
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - type: bind
        source: /etc/nginx/nginx.conf
        target: /etc/nginx/nginx.conf
    networks:
      - cryptospreadedge-network
    depends_on:
      - cryptospreadedge

volumes:
  redis_data:
    driver: local
  influxdb_data:
    driver: local
  kafka_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  cryptospreadedge-network:
    driver: overlay
    attachable: true