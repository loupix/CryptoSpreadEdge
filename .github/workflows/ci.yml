name: CI

on:
  push:
    branches: [ master ]

jobs:
  tests:
    name: Tests unitaires et intégration (${{ matrix.os }} | py${{ matrix.python }})
    runs-on: ${{ matrix.os }}
    env:
      PYTHONPATH: ${{ github.workspace }}/src
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python: ['3.11']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python }}
          channels: conda-forge,defaults
          channel-priority: true

      - name: Créer l'environnement (tests, Ubuntu)
        shell: bash -l {0}
        run: |
          conda env update -n test-env -f config/environments/conda/environment-test.yml
          conda activate test-env
          python -m pip install -r requirements.txt

      - name: Afficher versions
        shell: bash -l {0}
        run: |
          python --version
          pip --version
          pytest --version

      - name: Lancer tests unitaires
        shell: bash -l {0}
        run: |
          python -m pytest -q tests/unit -k "not deep_learning and not prediction"

      - name: Lancer tests d'intégration
        shell: bash -l {0}
        run: |
          python -m pytest -q tests/integration -k "not deep_learning and not prediction"

      - name: Lancer tests e2e
        shell: bash -l {0}
        run: |
          python -m pytest -q tests/e2e -k "not deep_learning and not prediction"

  docker-build:
    name: Build Docker images
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/feature/'))

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build main application image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infrastructure/docker/services/cryptospreadedge/Dockerfile
          push: false
          tags: cryptospreadedge:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker Swarm configuration
        run: |
          # Vérifier la syntaxe des fichiers Docker Swarm
          docker run --rm -v $(pwd):/workspace -w /workspace alpine:latest sh -c "
            apk add --no-cache docker-compose
            docker-compose -f infrastructure/docker/swarm/docker-stack-portfolio-optimized.yml config --quiet
          "

  security-scan:
    name: Security scan
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  portfolio-tests:
    name: Portfolio management tests
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: '3.11'
          channels: conda-forge,defaults
          channel-priority: true

      - name: Créer l'environnement
        shell: bash -l {0}
        run: |
          conda env update -n test-env -f environment-dev.yml
          conda activate test-env
          python -m pip install -r requirements.txt

      - name: Test portfolio optimizer
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        shell: bash -l {0}
        run: |
          python -m pytest -q tests/unit/test_portfolio_optimizer.py -v

      - name: Test price covariance
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        shell: bash -l {0}
        run: |
          python -m pytest -q tests/unit/test_price_covariance.py -v

      - name: Test portfolio CLI
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        shell: bash -l {0}
        run: |
          python scripts/tools/portfolio_cli.py --help

  documentation:
    name: Documentation check
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check documentation links
        run: |
          # Vérifier que les fichiers de documentation existent
          test -f docs/DOCKER_SWARM_PORTFOLIO.md
          test -f docs/TRADING_SYSTEM.md
          test -f infrastructure/monitoring/prometheus-portfolio.yml
          test -f infrastructure/monitoring/portfolio_rules.yml
          test -f infrastructure/nginx/nginx-portfolio.conf
          echo "✅ Tous les fichiers de documentation sont présents"

      - name: Validate YAML files
        run: |
          # Installer yamllint
          pip install yamllint
          
          # Valider les fichiers YAML
          yamllint infrastructure/docker/swarm/docker-stack-portfolio-optimized.yml
          yamllint infrastructure/monitoring/prometheus-portfolio.yml
          yamllint infrastructure/monitoring/portfolio_rules.yml
          echo "✅ Tous les fichiers YAML sont valides"

