"""
Script de test du syst√®me de pr√©diction et d'indicateurs CryptoSpreadEdge
"""

import sys
import asyncio
import logging
from pathlib import Path
from typing import Dict, List, Optional, Any
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time

# Ajouter le r√©pertoire racine au path
sys.path.append(str(Path(__file__).parent.parent.parent))

from src.indicators.base_indicator import IndicatorFactory, IndicatorComposite, indicator_manager
from src.indicators.technical_indicators import (
    MovingAverageIndicator, RSIIndicator, MACDIndicator, 
    BollingerBandsIndicator, StochasticIndicator, VolumeIndicator, ATRIndicator
)
from src.indicators.advanced_indicators import (
    IchimokuIndicator, WilliamsRIndicator, MLPredictionIndicator, 
    SentimentIndicator, VolatilityIndicator
)
from src.prediction.signal_generator import (
    SignalGenerator, TrendFollowingStrategy, MeanReversionStrategy, 
    MLPredictionStrategy, StrategyFactory
)
from src.prediction.ml_predictor import MLPredictor
from src.backtesting.backtesting_engine import BacktestingEngine, SimpleBacktestStrategy
from src.position.position_manager import PositionManager


class PredictionSystemTester:
    """Testeur du syst√®me de pr√©diction"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.setup_logging()
        self.test_results = {}
    
    def setup_logging(self):
        """Configure le logging"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
    
    def generate_test_data(self, symbol: str = "BTC", days: int = 365) -> pd.DataFrame:
        """G√©n√®re des donn√©es de test"""
        print(f"\nüìä G√©n√©ration de donn√©es de test pour {symbol} ({days} jours)")
        
        # G√©n√©rer des donn√©es OHLCV r√©alistes
        np.random.seed(42)
        
        # Prix de base
        base_price = 50000.0 if symbol == "BTC" else 3000.0
        
        # G√©n√©rer des retours avec tendance et volatilit√©
        returns = np.random.normal(0.0001, 0.02, days * 24)  # Retours horaires
        
        # Ajouter une tendance
        trend = np.linspace(0, 0.3, days * 24)  # Tendance haussi√®re de 30%
        returns += trend / (days * 24)
        
        # G√©n√©rer les prix
        prices = [base_price]
        for ret in returns:
            prices.append(prices[-1] * (1 + ret))
        
        # Cr√©er OHLCV
        data = []
        for i in range(1, len(prices)):
            close = prices[i]
            open_price = prices[i-1]
            
            # High et Low bas√©s sur la volatilit√©
            volatility = abs(returns[i-1]) * 2
            high = close * (1 + volatility * np.random.random())
            low = close * (1 - volatility * np.random.random())
            
            # Volume bas√© sur la volatilit√©
            volume = 1000 + volatility * 10000 * np.random.random()
            
            timestamp = datetime.utcnow() - timedelta(hours=len(prices)-i)
            
            data.append({
                'timestamp': timestamp,
                'open': open_price,
                'high': high,
                'low': low,
                'close': close,
                'volume': volume
            })
        
        df = pd.DataFrame(data)
        df.set_index('timestamp', inplace=True)
        
        print(f"‚úÖ Donn√©es g√©n√©r√©es: {len(df)} points")
        print(f"   Prix min: {df['close'].min():.2f}")
        print(f"   Prix max: {df['close'].max():.2f}")
        print(f"   Volume moyen: {df['volume'].mean():.0f}")
        
        return df
    
    async def test_technical_indicators(self) -> bool:
        """Teste les indicateurs techniques"""
        print("\n" + "="*60)
        print("TEST DES INDICATEURS TECHNIQUES")
        print("="*60)
        
        try:
            # G√©n√©rer des donn√©es de test
            data = self.generate_test_data("BTC", 100)
            
            # Cr√©er les indicateurs
            indicators = {
                "SMA_20": MovingAverageIndicator("SMA_20", "SMA", 20),
                "EMA_20": MovingAverageIndicator("EMA_20", "EMA", 20),
                "RSI_14": RSIIndicator("RSI_14", 14),
                "MACD": MACDIndicator("MACD", 12, 26, 9),
                "BB_20": BollingerBandsIndicator("BB_20", 20, 2.0),
                "STOCH_14": StochasticIndicator("STOCH_14", 14, 3),
                "VOLUME_20": VolumeIndicator("VOLUME_20", 20),
                "ATR_14": ATRIndicator("ATR_14", 14)
            }
            
            # Calculer les indicateurs
            results = {}
            for name, indicator in indicators.items():
                try:
                    values = indicator.calculate(data)
                    results[name] = values
                    print(f"‚úÖ {name}: {len(values)} valeurs calcul√©es")
                    
                    if values:
                        latest = values[-1]
                        print(f"   Derni√®re valeur: {latest.value:.4f} (confiance: {latest.confidence:.2%})")
                
                except Exception as e:
                    print(f"‚ùå {name}: Erreur - {e}")
                    results[name] = []
            
            # Tester le composite d'indicateurs
            composite = IndicatorComposite("TestComposite")
            for indicator in indicators.values():
                composite.add_indicator(indicator)
            
            composite_results = composite.calculate_all(data)
            print(f"\n‚úÖ Composite: {len(composite_results)} indicateurs calcul√©s")
            
            # Tester la g√©n√©ration de signaux
            all_signals = composite.get_combined_signals(data)
            print(f"‚úÖ Signaux g√©n√©r√©s: {len(all_signals)}")
            
            for signal in all_signals[:5]:  # Afficher les 5 premiers
                print(f"   Signal: {signal.signal_type} force={signal.strength:.2f} "
                      f"confiance={signal.confidence:.2%}")
            
            return True
        
        except Exception as e:
            print(f"‚ùå Erreur test indicateurs techniques: {e}")
            return False
    
    async def test_advanced_indicators(self) -> bool:
        """Teste les indicateurs avanc√©s"""
        print("\n" + "="*60)
        print("TEST DES INDICATEURS AVANC√âS")
        print("="*60)
        
        try:
            # G√©n√©rer des donn√©es de test
            data = self.generate_test_data("ETH", 200)
            
            # Cr√©er les indicateurs avanc√©s
            indicators = {
                "ICHIMOKU": IchimokuIndicator("ICHIMOKU", 9, 26, 52),
                "WILLIAMS_R": WilliamsRIndicator("WILLIAMS_R", 14),
                "VOLATILITY": VolatilityIndicator("VOLATILITY", 20)
            }
            
            # Calculer les indicateurs
            for name, indicator in indicators.items():
                try:
                    values = indicator.calculate(data)
                    print(f"‚úÖ {name}: {len(values)} valeurs calcul√©es")
                    
                    if values:
                        latest = values[-1]
                        print(f"   Derni√®re valeur: {latest.value:.4f}")
                        if latest.metadata:
                            print(f"   M√©tadonn√©es: {list(latest.metadata.keys())}")
                
                except Exception as e:
                    print(f"‚ùå {name}: Erreur - {e}")
            
            # Tester l'indicateur de sentiment
            sentiment_indicator = SentimentIndicator("SENTIMENT")
            
            # Ajouter des donn√©es de sentiment simul√©es
            for i in range(10):
                sentiment_score = np.random.uniform(-1, 1)
                timestamp = datetime.utcnow() - timedelta(hours=i)
                sentiment_indicator.add_sentiment_data(sentiment_score, timestamp, f"source_{i}")
            
            sentiment_values = sentiment_indicator.calculate(data)
            print(f"‚úÖ SENTIMENT: {len(sentiment_values)} valeurs calcul√©es")
            
            return True
        
        except Exception as e:
            print(f"‚ùå Erreur test indicateurs avanc√©s: {e}")
            return False
    
    async def test_ml_prediction(self) -> bool:
        """Teste le syst√®me de pr√©diction ML"""
        print("\n" + "="*60)
        print("TEST DU SYST√àME DE PR√âDICTION ML")
        print("="*60)
        
        try:
            # G√©n√©rer des donn√©es de test
            data = self.generate_test_data("BTC", 300)
            
            # Cr√©er le pr√©dicteur ML
            ml_predictor = MLPredictor("TestMLPredictor")
            
            # Entra√Æner les mod√®les
            print("üß† Entra√Ænement des mod√®les ML...")
            training_results = ml_predictor.train_models(data)
            
            print("R√©sultats d'entra√Ænement:")
            for model_name, result in training_results.items():
                if 'error' not in result:
                    print(f"  {model_name}: R¬≤ = {result['r2_score']:.4f}, "
                          f"MSE = {result['mse']:.6f}")
                else:
                    print(f"  {model_name}: Erreur - {result['error']}")
            
            # Faire des pr√©dictions
            print("\nüîÆ G√©n√©ration de pr√©dictions...")
            predictions = ml_predictor.predict_ensemble(data)
            
            if predictions:
                print(f"‚úÖ {len(predictions)} pr√©dictions g√©n√©r√©es")
                
                # Afficher les derni√®res pr√©dictions
                for i, pred in enumerate(predictions[-5:]):
                    print(f"  Pr√©diction {i+1}: {pred.predicted_change:.2%} "
                          f"(confiance: {pred.confidence:.2%})")
                
                # Statistiques des pr√©dictions
                changes = [p.predicted_change for p in predictions]
                confidences = [p.confidence for p in predictions]
                
                print(f"\nStatistiques des pr√©dictions:")
                print(f"  Changement moyen: {np.mean(changes):.2%}")
                print(f"  Confiance moyenne: {np.mean(confidences):.2%}")
                print(f"  Pr√©dictions positives: {sum(1 for c in changes if c > 0)}")
                print(f"  Pr√©dictions n√©gatives: {sum(1 for c in changes if c < 0)}")
            else:
                print("‚ùå Aucune pr√©diction g√©n√©r√©e")
                return False
            
            return True
        
        except Exception as e:
            print(f"‚ùå Erreur test pr√©diction ML: {e}")
            return False
    
    async def test_signal_generation(self) -> bool:
        """Teste la g√©n√©ration de signaux"""
        print("\n" + "="*60)
        print("TEST DE LA G√âN√âRATION DE SIGNAUX")
        print("="*60)
        
        try:
            # G√©n√©rer des donn√©es de test
            data = self.generate_test_data("BTC", 200)
            
            # Cr√©er les indicateurs
            indicators = {
                "SMA_20": MovingAverageIndicator("SMA_20", "SMA", 20),
                "SMA_50": MovingAverageIndicator("SMA_50", "SMA", 50),
                "RSI_14": RSIIndicator("RSI_14", 14),
                "MACD": MACDIndicator("MACD", 12, 26, 9),
                "BB_20": BollingerBandsIndicator("BB_20", 20, 2.0),
                "STOCH_14": StochasticIndicator("STOCH_14", 14, 3)
            }
            
            # Calculer les indicateurs
            indicator_values = {}
            for name, indicator in indicators.items():
                values = indicator.calculate(data)
                indicator_values[name] = values
            
            # Cr√©er le g√©n√©rateur de signaux
            signal_generator = SignalGenerator("TestSignalGenerator")
            
            # Ajouter les strat√©gies
            strategies = [
                TrendFollowingStrategy("TrendFollowing"),
                MeanReversionStrategy("MeanReversion"),
                MLPredictionStrategy("MLPrediction")
            ]
            
            for strategy in strategies:
                signal_generator.add_strategy(strategy)
            
            # G√©n√©rer des signaux
            current_price = data['close'].iloc[-1]
            signals = signal_generator.generate_signals(indicator_values, current_price, "BTC")
            
            print(f"‚úÖ {len(signals)} signaux g√©n√©r√©s")
            
            # Afficher les signaux
            for i, signal in enumerate(signals[:10]):  # Afficher les 10 premiers
                print(f"  Signal {i+1}: {signal.signal_type.value} "
                      f"force={signal.strength:.2f} confiance={signal.confidence:.2%}")
                if signal.reasoning:
                    print(f"    Raison: {', '.join(signal.reasoning[:2])}")
            
            # Statistiques des signaux
            signal_types = {}
            for signal in signals:
                signal_type = signal.signal_type.value
                signal_types[signal_type] = signal_types.get(signal_type, 0) + 1
            
            print(f"\nTypes de signaux:")
            for signal_type, count in signal_types.items():
                print(f"  {signal_type}: {count}")
            
            return True
        
        except Exception as e:
            print(f"‚ùå Erreur test g√©n√©ration signaux: {e}")
            return False
    
    async def test_backtesting(self) -> bool:
        """Teste le syst√®me de backtesting"""
        print("\n" + "="*60)
        print("TEST DU SYST√àME DE BACKTESTING")
        print("="*60)
        
        try:
            # G√©n√©rer des donn√©es de test
            data = self.generate_test_data("BTC", 100)
            
            # Cr√©er des signaux de test
            signals = []
            for i in range(20, len(data), 10):
                if i >= len(data):
                    break
                
                # Signal d'achat si prix > SMA 20
                sma_20 = data['close'].rolling(20).mean().iloc[i]
                current_price = data['close'].iloc[i]
                
                if current_price > sma_20:
                    signal_type = "buy"
                    strength = 0.7
                else:
                    signal_type = "sell"
                    strength = 0.6
                
                from src.prediction.signal_generator import TradingSignal, SignalType
                
                signal = TradingSignal(
                    signal_type=SignalType.BUY if signal_type == "buy" else SignalType.SELL,
                    strength=strength,
                    confidence=0.8,
                    timestamp=data.index[i],
                    symbol="BTC",
                    price=current_price,
                    stop_loss=current_price * 0.95,
                    take_profit=current_price * 1.05
                )
                signals.append(signal)
            
            print(f"‚úÖ {len(signals)} signaux de test cr√©√©s")
            
            # Cr√©er le moteur de backtesting
            backtest_engine = BacktestingEngine("TestBacktestEngine")
            
            # D√©finir la strat√©gie
            strategy = SimpleBacktestStrategy(
                max_position_size=0.1,
                stop_loss_pct=0.05,
                take_profit_pct=0.10,
                max_hold_days=10
            )
            backtest_engine.set_strategy(strategy)
            
            # Charger les donn√©es et signaux
            backtest_engine.load_data(data)
            backtest_engine.load_signals(signals)
            
            # Ex√©cuter le backtest
            print("üèÉ Ex√©cution du backtest...")
            results = backtest_engine.run_backtest(initial_capital=10000.0)
            
            if results:
                print(f"‚úÖ Backtest termin√©")
                print(f"\nR√©sultats du backtest:")
                print(f"  Trades totaux: {results.total_trades}")
                print(f"  Taux de r√©ussite: {results.win_rate:.2%}")
                print(f"  PnL total: {results.total_pnl:.2f} USD")
                print(f"  Profit net: {results.net_profit:.2f} USD")
                print(f"  Frais totaux: {results.total_fees:.2f} USD")
                print(f"  Drawdown max: {results.max_drawdown:.2%}")
                print(f"  Ratio de Sharpe: {results.sharpe_ratio:.2f}")
                print(f"  Retour total: {results.total_return:.2%}")
                print(f"  Retour annualis√©: {results.annualized_return:.2%}")
                
                if results.trades:
                    print(f"\nD√©tails des trades:")
                    for i, trade in enumerate(results.trades[:5]):  # Afficher les 5 premiers
                        print(f"  Trade {i+1}: {trade.symbol} {trade.position_type.value} "
                              f"PnL={trade.net_pnl:.2f} dur√©e={trade.duration.days}j")
            else:
                print("‚ùå Aucun r√©sultat de backtest")
                return False
            
            return True
        
        except Exception as e:
            print(f"‚ùå Erreur test backtesting: {e}")
            return False
    
    async def test_position_management(self) -> bool:
        """Teste le syst√®me de gestion des positions"""
        print("\n" + "="*60)
        print("TEST DE LA GESTION DES POSITIONS")
        print("="*60)
        
        try:
            # Cr√©er le gestionnaire de positions
            position_manager = PositionManager("TestPositionManager")
            position_manager.set_portfolio_value(100000.0)
            
            # Cr√©er des signaux de test
            from src.prediction.signal_generator import TradingSignal, SignalType
            
            signals = []
            for i in range(5):
                signal = TradingSignal(
                    signal_type=SignalType.BUY if i % 2 == 0 else SignalType.SELL,
                    strength=0.7 + i * 0.05,
                    confidence=0.8,
                    timestamp=datetime.utcnow() - timedelta(hours=i),
                    symbol=f"SYMBOL_{i}",
                    price=50000.0 + i * 1000,
                    stop_loss=48000.0 + i * 1000,
                    take_profit=52000.0 + i * 1000
                )
                signals.append(signal)
            
            print(f"‚úÖ {len(signals)} signaux de test cr√©√©s")
            
            # Ajouter des demandes de positions
            for i, signal in enumerate(signals):
                success = position_manager.add_position_request(
                    signal, 
                    sizing_strategy="percentage",
                    priority=i + 1
                )
                print(f"  Demande {i+1}: {'‚úÖ Ajout√©e' if success else '‚ùå Rejet√©e'}")
            
            # Traiter les demandes
            print("\nüîÑ Traitement des demandes de positions...")
            allocations = position_manager.process_position_requests()
            
            print(f"‚úÖ {len(allocations)} positions allou√©es")
            
            for allocation in allocations:
                print(f"  {allocation.symbol}: {allocation.position_type.value} "
                      f"size={allocation.allocated_size:.4f} "
                      f"risk/reward={allocation.risk_reward_ratio:.2f}")
            
            # Afficher le r√©sum√© du portefeuille
            summary = position_manager.get_portfolio_summary()
            print(f"\nR√©sum√© du portefeuille:")
            print(f"  Valeur du portefeuille: {summary['portfolio_value']:.2f} USD")
            print(f"  √âquit√© totale: {summary['total_equity']:.2f} USD")
            print(f"  PnL non r√©alis√©: {summary['unrealized_pnl']:.2f} USD")
            print(f"  Nombre de positions: {summary['positions_count']}")
            
            # Afficher les m√©triques de risque
            risk_metrics = position_manager.get_position_risk_metrics()
            if risk_metrics:
                print(f"\nM√©triques de risque:")
                print(f"  VaR 95%: {risk_metrics['var_95']:.2f} USD")
                print(f"  Risque de corr√©lation: {risk_metrics['correlation_risk']:.2f}")
                print(f"  Risque de concentration: {risk_metrics['concentration_risk']:.2%}")
                print(f"  Ratio de levier: {risk_metrics['leverage_ratio']:.2f}")
            
            return True
        
        except Exception as e:
            print(f"‚ùå Erreur test gestion positions: {e}")
            return False
    
    async def run_all_tests(self):
        """Ex√©cute tous les tests"""
        print("="*60)
        print("D√âMARRAGE DES TESTS DU SYST√àME DE PR√âDICTION")
        print("="*60)
        
        start_time = time.time()
        
        # Liste des tests
        tests = [
            ("Indicateurs techniques", self.test_technical_indicators),
            ("Indicateurs avanc√©s", self.test_advanced_indicators),
            ("Pr√©diction ML", self.test_ml_prediction),
            ("G√©n√©ration de signaux", self.test_signal_generation),
            ("Backtesting", self.test_backtesting),
            ("Gestion des positions", self.test_position_management)
        ]
        
        # Ex√©cuter les tests
        results = {}
        for test_name, test_func in tests:
            print(f"\nüß™ Test: {test_name}")
            try:
                result = await test_func()
                results[test_name] = result
                print(f"‚úÖ {test_name}: {'R√©ussi' if result else '√âchou√©'}")
            except Exception as e:
                print(f"‚ùå {test_name}: Erreur - {e}")
                results[test_name] = False
        
        # Calculer le temps total
        total_time = time.time() - start_time
        
        # Afficher le r√©sum√©
        print("\n" + "="*60)
        print("R√âSUM√â DES TESTS")
        print("="*60)
        
        successful_tests = sum(1 for result in results.values() if result)
        total_tests = len(results)
        
        print(f"Tests r√©ussis: {successful_tests}/{total_tests}")
        print(f"Temps total: {total_time:.2f}s")
        
        for test_name, result in results.items():
            status = "‚úÖ" if result else "‚ùå"
            print(f"  {status} {test_name}")
        
        if successful_tests == total_tests:
            print("\nüéâ Tous les tests sont pass√©s avec succ√®s!")
            print("Le syst√®me de pr√©diction est pr√™t pour le trading!")
        else:
            print(f"\n‚ö†Ô∏è  {total_tests - successful_tests} test(s) ont √©chou√©")
            print("Des corrections sont n√©cessaires avant de pouvoir utiliser le syst√®me")
        
        return successful_tests == total_tests


async def main():
    """Fonction principale"""
    tester = PredictionSystemTester()
    success = await tester.run_all_tests()
    
    if success:
        print("\nüöÄ Le syst√®me de pr√©diction est op√©rationnel!")
    else:
        print("\nüîß Des corrections sont n√©cessaires")


if __name__ == "__main__":
    asyncio.run(main())